<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Solo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://selfsolo.com/"/>
  <updated>2019-12-18T03:56:47.030Z</updated>
  <id>https://selfsolo.com/</id>
  
  <author>
    <name>Sera Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开源DNS服务器源码解析（草稿笔记，待优化）</title>
    <link href="https://selfsolo.com/2019/09/18/%E5%BC%80%E6%BA%90DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E8%8D%89%E7%A8%BF%E7%AC%94%E8%AE%B0%EF%BC%8C%E5%BE%85%E4%BC%98%E5%8C%96%EF%BC%89/"/>
    <id>https://selfsolo.com/2019/09/18/开源DNS服务器源码解析（草稿笔记，待优化）/</id>
    <published>2019-09-18T12:32:56.000Z</published>
    <updated>2019-12-18T03:56:47.030Z</updated>
    
    <content type="html"><![CDATA[<p>DNS是网络的基础服务，通过阅读开源的DNS Server源码，可以更好地帮助我们了解其工作机制及原理。本篇起因源于一次事故，下面就听在下娓娓道来。</p><a id="more"></a><p>我们选择一个开源的DNS服务器，这里笔者选择的是 <a href="https://github.com/PowerDNS/pdns" target="_blank" rel="noopener">PowerDNS</a>，1800多star，也是很多公司搭建DNS服务的一个常见选择。</p><p>编译安装暂略</p><p>分支：rec-4.0.x</p><p>###递归解析</p><p>入口看 pdns_recursor.cc 文件，第690行开始，</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191217204457.png" alt></p><p>DNSComboWriter类似一个生产者，获取请求的 域名 d_qname 和 请求类型 d_qtype，下面是处理EDNS。</p><p>再看下面</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191217204919.png" alt></p><p>738行，初始化了一个DNSPacketWriter，用来写返回的packet。</p><p>750行，初始化了解析器。用来做递归解析的。</p><p>752行， 设置了Lua引擎指针 t_pdl，pdns通过Lua的形式提供了各种hook。</p><p>再往下看，784行初始化了res，即返回码，服务端和客户端都会根据这个判断请求状态。如 Rcode为 SERVFAIL 时，很多开源的dns库就会报错。</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218103654.png" alt></p><p>813行，会调用lua的一个hook，prerpz()方法。</p><p>往下看</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218105837.png" alt></p><p>823行，会调用Lua Hook，preresolve方法，在每次递归解析前会执行这个Hook。</p><p>看if条件，如果没有启用 Lua 或者 preresolve 方法返回了false，会进行默认解析。</p><p>825 - 860 行，看默认解析，是 RPZ 和 policy 的判断，这块暂略。不同policy会直接影响解析结果。</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218110645.png" alt></p><p>try的块中，可以看到默认解析会调用 syncres.cc文件中的SyncRes类的beginResolve方法，shouldNotValidate的值是用来判断是否OOB的（OOB暂略）。中间报错会直接返回SERVFAIL。</p><p>暂时不跟进，主要看Lua，往下看</p><p>873行，判断返回码res是否等于-2（-2表示命中了过滤引擎的策略）</p><blockquote><p>syncres.cc</p></blockquote><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218111229.png" alt></p><p>同之前一样，下面就会根据不同policy进行处理。</p><p>往下看，默认解析最后，如果没有报错的话，会执行Lua Hook，nodata方法</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218111629.png" alt></p><p>第二个if 执行的是 nxdomain hook。（NXDOMAIN 暂略）</p><p>最后再调用 Lua Hook，postresolve方法。（即解析完后执行）</p><p>往下看，如果返回码res 不等于-1，都会执行</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218113239.png" alt></p><p>如果shouldNotValidate为true，即比如postresolve 中返回了false才会执行这段code。</p><p>往下看，</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218113958.png" alt></p><p>会调用validateRecords方法（判断CSPF，暂略）判断解析记录的状态。</p><p>然后根据不同状态设置ad码。</p><p>下面是写到返回的packet中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DNS是网络的基础服务，通过阅读开源的DNS Server源码，可以更好地帮助我们了解其工作机制及原理。本篇起因源于一次事故，下面就听在下娓娓道来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="sourcecode" scheme="https://selfsolo.com/categories/sourcecode/"/>
    
    
      <category term="源码" scheme="https://selfsolo.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="dns" scheme="https://selfsolo.com/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>黑盒扫描</title>
    <link href="https://selfsolo.com/2019/09/15/%E9%BB%91%E7%9B%92%E6%89%AB%E6%8F%8F/"/>
    <id>https://selfsolo.com/2019/09/15/黑盒扫描/</id>
    <published>2019-09-15T03:02:51.000Z</published>
    <updated>2019-09-16T11:49:57.176Z</updated>
    
    <content type="html"><![CDATA[<p>黑盒扫描应该是很基本的一个安全产品，可以用很低的成本去发现安全问题，同时提升SDL渗透的效率。</p><a id="more"></a><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>黑盒扫描的目的主要有两个：</p><ol><li>资产发现</li><li>漏洞扫描</li></ol><p>扫描器的效率和表现方面，单机可以用多进程+协程的方式去提qps，资源够也可以使用分布式，如：kafka / celery（后者感觉更重一点，虽然能帮你做很多事情）</p><p>我踩坑设计了一个主要依靠redis做任务的分发和pull执行（主要想糙快猛地实现），现在看来效率的确是因为架构设计有问题导致整体表现不尽如人意。</p><p>自己后来想的一个理想的架构设计：</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/Lark20190916-184509.png" alt></p><h2 id="子域名搜集"><a href="#子域名搜集" class="headerlink" title="子域名搜集"></a>子域名搜集</h2><p>子域名搜集是信息搜集里很关键的一步，因为它拓展了很大一部分的攻击面。下面是我对子域名搜集的实践。</p><p>我用python实现了一个子域名搜集工具，主要用到的方法有：</p><ol><li>基于字典</li><li>开源情报 和 搜索引擎</li><li>IP反查</li><li>TLS证书获取</li></ol><p>我使用的前者，部署最方便。</p><p>整体架构：</p><p><img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/Lark20190916-184731.png" alt></p><p>这是单机跑的非理想情况，4核8g，60%cpu，800-1500qps</p><p>几个大小问题：</p><ol><li>域名泛解析</li><li>域名去重</li><li>比较依赖redis</li></ol><p>泛解析有两种解决方式，一种是ip-domain的hash map超过了阈值，最后做清洗；另一种是查完了，就做一次 &lt;随机前缀.目标域名&gt;的查询，判断是否存在，这样（和清洗一个道理）。实际做下来是1方便，因为第二种方式，如果在做判断的同时，有其他做dns query的查到了结果，就会被绕过存入data。</p><p>域名去重是因为首先引入了开源情报和搜索引擎，还有后续得到的CNAME啊，NS啊之类的，不做去重，任务队列可能就大了两三倍。我去重主要依赖redis的set，这样又回引入大key问题，解决大key，可以根据域名的级数（多少个&lt;.&gt;）分去重set，也可以大key分小key，因为并发，暂时没想到好的设计，优化考虑用布隆过滤器去做去重。</p><p>依赖redis，前面有提到，后面就不赘述了。</p><h2 id="敏感文件扫描"><a href="#敏感文件扫描" class="headerlink" title="敏感文件扫描"></a>敏感文件扫描</h2><p>这个我实现的很简单，主要看了github上几个老前辈的实现，总结了一下，可以这样做：</p><ol><li>对目标做一次全站链接爬取（需要考虑url去重）</li><li>根据links生成一级级目录</li><li>配合对应字典，做验证。</li></ol><p>其实有了目录+对应漏洞的字典，主要就是验证了。这块同时可以验证的漏洞有很多，除了敏感文件泄漏，还有目录遍历，未授权访问等等。后者可以通过打分策略来做（实现比较low，也可以用图像识别，ML做）。</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>可以找一个社区比较大的（poc贡献多），因为一个是自己写poc需要很多时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黑盒扫描应该是很基本的一个安全产品，可以用很低的成本去发现安全问题，同时提升SDL渗透的效率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="security" scheme="https://selfsolo.com/categories/security/"/>
    
    
      <category term="扫描器" scheme="https://selfsolo.com/tags/%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>旧Blog不再使用，重新审视自己</title>
    <link href="https://selfsolo.com/2019/09/14/hello-world/"/>
    <id>https://selfsolo.com/2019/09/14/hello-world/</id>
    <published>2019-09-14T12:04:30.577Z</published>
    <updated>2019-09-15T02:24:06.913Z</updated>
    
    <content type="html"><![CDATA[<p>从大一接触安全，懵懵懂懂直到临近毕业，再到字节实习，认识了很多技术大佬，它山之高，让我看到了很多不同的层面和角度，想把这个blog作为道标，重新开始一条严谨对待自己和人生的技术之路。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从大一接触安全，懵懵懂懂直到临近毕业，再到字节实习，认识了很多技术大佬，它山之高，让我看到了很多不同的层面和角度，想把这个blog作为道标，重新开始一条严谨对待自己和人生的技术之路。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
